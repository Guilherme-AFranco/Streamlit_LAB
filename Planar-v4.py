import pandas as pd
import streamlit as st
import altair as alt
from PIL import Image
from sqlalchemy import create_engine
import os
import pymysql
import dotenv
import matplotlib.pyplot as plt
import numpy as np
import imageio
import io
import pymysql
from nptdms import TdmsFile
import pymysql
import time
import plotly.express as px

from Insert_function import *
from Calibration_analysis_function import *
from Calibration_generator_function import *
from Pos_calibration_analysis_function import *

# --- Criar o dataframe
dotenv.load_dotenv()

# Configura√ß√µes de conex√£o com o banco de dados
host=os.environ['MYSQL_HOST']
user=os.environ['MYSQL_USER']
password=os.environ['MYSQL_PASSWORD']
database=os.environ['MYSQL_DATABASE']
port=int(os.environ['MYSQL_PORT'])
cont_ID=os.environ['MYSQL_ID']

# String de conex√£o
connection_string = f'mysql+pymysql://{user}:{password}@{host}:{port}/{database}'

# Criar engine de conex√£o
engine = create_engine(connection_string)

# Obter dados do banco de dados
sql = 'SHOW TABLES'
df = pd.read_sql(sql, con=engine)

# CONFIGURA√á√ÉO DA P√ÅGINA
st.set_page_config(
    page_title='DASHBOARD - Sensor Planar',
    page_icon='üí≤',
    layout='wide',
    initial_sidebar_state='expanded',
    menu_items={
        'Get Help': 'http://www.meusite.com.br',
        'Report a bug': "http://www.meuoutrosite.com.br",
        'About': "App desenvolvido para inspe√ß√£o do sensor planar."
    }
)

# Fun√ß√£o para extrair o valor desejado
def extrair_valor(valor):
    return valor.split('_')[0]

def extrair_valor_matriz(valor):
    return '_'.join(valor.split('_')[:2])

def extrair_valor_pos_sublinhado(valor):
    return valor.split('_', 1)[1]

with st.sidebar:
    logo_teste = Image.open('./Imagens/Lemi-Logo.png')
    st.image(logo_teste, width=300)
    # st.subheader('MENU - DASHBOARD PLANAR')

# Adicionando um t√≠tulo √† sidebar
st.sidebar.title("Navega√ß√£o - Planar")

# Utilizando Markdown para organizar visualmente
st.sidebar.markdown("---")  # Linha divis√≥ria

# Criando o menu de navega√ß√£o com √≠cones e cores
page = st.sidebar.radio(
    "Selecione a fun√ß√£o desejada:", 
    (
        "üìÇ Inclus√£o/Exclus√£o de arquivos", 
        "‚öôÔ∏è Gerador de matriz de calibra√ß√£o", 
        "üìà An√°lise dos gr√°ficos", 
        "üîç Visualiza√ß√£o", 
        "üìä P√≥s Calibra√ß√£o"
    )
)

# Separando os itens do menu com uma linha divis√≥ria
st.sidebar.markdown("---")

# Bot√£o de sa√≠da
if st.sidebar.button('Exit'):
    # Comando para pausar/parar o container Docker (substitua '<container_id>' pelo seu container)
    os.system(f'docker stop {cont_ID}')
    
    # Fecha o Streamlit
    st.write("Aplicativo est√° sendo fechado...")
    os._exit(0)  # Finaliza o Streamlit

# # Cria√ß√£o de um seletor na barra lateral
#     page = st.sidebar.radio(
#         "", 
#         ("Inclus√£o/Exclus√£o de arquivos", "Gerador de matriz de calibra√ß√£o" , "An√°lise dos graficos", "Visualiza√ß√£o", "P√≥s Calibra√ß√£o")
#         )

# Conte√∫do da P√°gina 1
if page == "üìÇ Inclus√£o/Exclus√£o de arquivos":
    cols = st.columns(3)
    with cols[0]:
        # Caixa de entrada para o caminho da pasta
        folder_path = st.text_input("Digite o caminho para inserir os arquivos (ex.: E:\Planar\Calib):")

        # Verifica se um caminho de pasta foi fornecido
        if folder_path:
            try:
                st.write("Realizando inclus√£o dos arquivos selecionados...")
                # Lista todos os arquivos na pasta
                files_insert = insert_calibration(folder_path)
                
                st.write("Arquivos carregados corretamente.")

            except:
                st.write("Ocorreu um erro na importa√ß√£o. Verifique se os dados est√£o no formato correto.")

    with cols[1]:
        # Exclus√£o de arquivos
        df['Arquivos alocados'] = df['Tables_in_base_de_dados']

        delet_file_box = st.multiselect('Selecione os arquivos para exclus√£o (essa exclus√£o √© irrevers√≠vel).', df['Arquivos alocados'])
        
        # Bot√£o para realizar a a√ß√£o
        if st.button('Excluir arquivos'):
            if delet_file_box:
                st.write("Arquivo(s) selecionado(s):")
                for arquivo in delet_file_box:
                    st.write(arquivo)
                
                # Realizar exclus√£o dos arquivos selecionados
                st.write("Realizando exclus√£o do(s) arquivo(s) selecionado(s)...")
                for arquivo in delet_file_box:
                    files_exclude = exclude_calibration(arquivo)
                st.write("Exclus√£o conclu√≠da")

            else:
                st.write("Nenhum arquivo selecionado.")

    with cols[2]:
        st.write(df['Arquivos alocados'])
    
    st.write('Obs.: Os nomes dos arquivos a incluir devem ser no formato \'XXXu-YY\'')
    st.write('Onde XXX √© a espessura do cilindro de calibra√ß√£o (400, 520, ...) e YY √© a coleta realizada (00, 01, 02, 03, ...)')


# Conte√∫do da P√°gina 2
elif page == "‚öôÔ∏è Gerador de matriz de calibra√ß√£o":
    cols = st.columns(3)

    with cols[0]:
        # Filtrar os nomes que come√ßam com n√∫meros
        number_names = df[df['Tables_in_base_de_dados'].str.contains(r'^\d')]['Tables_in_base_de_dados']
        # Exibir a caixa de sele√ß√£o com os valores filtrados
        file_box = st.multiselect('Selecione a espessura da calibra√ß√£o', number_names.apply(lambda x: extrair_valor(x)).unique().tolist())
    filtered = df[df['Tables_in_base_de_dados'].apply(lambda x: any(x.startswith(val) for val in file_box))]['Tables_in_base_de_dados'].tolist()

    with cols[1]:
        # Filtrar os nomes que come√ßam com "VH"
        vh_names = df[df['Tables_in_base_de_dados'].str.startswith('VH')]['Tables_in_base_de_dados']

        # Exibir a caixa de sele√ß√£o com os valores filtrados
        VH_box = st.selectbox('Selecione o VH', vh_names)
        # VH_box = st.selectbox('Selecione o VH', df['Tables_in_base_de_dados'])
    
    # Inicializando session state
    if 'equacao_calib' not in st.session_state:
        st.session_state.equacao_calib = None
    if 'matriz_fig' not in st.session_state:
        st.session_state.matriz_fig = None

    #st.write(filtrado)
    # Bot√£o para realizar a a√ß√£o
    if st.button('Gerar Matriz'):
        if file_box and VH_box:
            st.write("Gerando matriz de calibra√ß√£o...")
            if len(filtered) == 16:
                try:
                    st.session_state.equacao_calib = calibration_generator(filtered, VH_box)
                    st.write("Matriz gerada")
                except:
                    st.write("Erro na gera√ß√£o de calibra√ß√£o, verifique se os dados est√£o corretos.")
                st.session_state.matriz_fig = plot_matriz_calib_plotly(st.session_state.equacao_calib)
            else:
                st.write("Erro na gera√ß√£o de calibra√ß√£o, verifique se existem 16 coletas de espessura.")
        else:
            st.write("Matriz/espessura(s) n√£o selecionadas.")
            
    # Verificando se a matriz foi gerada para exibir os elementos subsequentes
    if st.session_state.matriz_fig:
        # Criando colunas
        col1, col2 = st.columns(2)

        # Exibindo a imagem na primeira coluna
        with col1:
            # st.image(st.session_state.matriz_fig, caption='Matriz de calibra√ß√£o', use_column_width=False, width=int(300))
            st.plotly_chart(st.session_state.matriz_fig, use_container_width=True)

        # Exibindo a imagem na primeira coluna
        with col2:
            with st.form(key='save_form'):
                nome_equacao_calib = st.text_input("Nome do arquivo de calibra√ß√£o (ex.: Matriz_calibXX)")
                submit_button = st.form_submit_button(label='Salvar equa√ß√£o no banco de dados')

                if submit_button:
                    if nome_equacao_calib:
                        st.write("Incluindo matriz no banco de dados...")
                        try:
                            insert_matriz(st.session_state.equacao_calib, nome_equacao_calib)
                            st.write("Matriz incluida.")
                        except:
                            st.write("Nome incluso incorretamente.")
                    else:
                        st.write("Gere a equa√ß√£o antes.")

    cols = st.columns(3)

    with cols[0]:
        # Filtrar os nomes que come√ßam com "Matriz"
        matriz_names = df[df['Tables_in_base_de_dados'].str.startswith('Matriz')]['Tables_in_base_de_dados']

        matriz_file_box = st.selectbox('Selecione a matriz de calibra√ß√£o', matriz_names.apply(lambda x: extrair_valor_matriz(x)).unique().tolist())
    
    if 'calib_fig' not in st.session_state:
        st.session_state.calib_fig = None

    # Inicializar uma flag para determinar se a an√°lise foi feita
    if 'analise_feita' not in st.session_state:
        st.session_state.analise_feita = False
    if "selected_column" not in st.session_state:
        st.session_state.selected_column = None

    if st.button("Analise de matriz"):
        # Dados para os gr√°ficos
        Rx_labels = [i for i in range(0, 13)]  # Nomes dos Rx (colunas)
        values_calib = [12] * 13  # Valores arbitr√°rios

        st.session_state.Rx_labels = Rx_labels
        st.session_state.values_calib = values_calib

        filtered_matriz_calib = df[df['Tables_in_base_de_dados'].str.startswith(matriz_file_box)]['Tables_in_base_de_dados'].tolist() # Obtendo todos os arquivos da espessura selecionada
        try:
            matriz_cali = capture_calib(filtered_matriz_calib)
        except:
            st.write("Erro na an√°lise da matriz.")
        # Guardar a matriz no estado da sess√£o para acesso posterior
        st.session_state.matriz_cali = matriz_cali
        
        # Definir que a an√°lise foi feita
        st.session_state.analise_feita = True
        
    # Verificar se a an√°lise j√° foi feita para exibir os bot√µes Rx e o gr√°fico correspondente
    if st.session_state.analise_feita:
        # Cria√ß√£o do gr√°fico de barras
        colors = ['blue'] * 13  # Cor padr√£o para as barras
        # colors[0] = 'red'
        # Alterar a cor da coluna selecionada
        if st.session_state.selected_column is not None:
            colors[st.session_state.selected_column] = 'red'  # Mudar a cor para a coluna selecionada
            # st.write(colors)
            
        fig = px.bar(
            x=st.session_state.Rx_labels, 
            y=st.session_state.values_calib, 
            labels={'x': '', 'y': 'Tx'}, 
            title="Caracter√≠sticas da malha",
            # color_discrete_sequence=colors  # Aplicando as cores
        )

        # # Cria√ß√£o do gr√°fico de barras (primeiro exibir o gr√°fico)
        # fig = px.bar(x=st.session_state.Rx_labels, y=st.session_state.values_calib, labels={'x': '', 'y': 'Tx'}, title="Caracter√≠sticas da malha")
        
        # Remover os n√∫meros no eixo x
        fig.update_xaxes(showticklabels=False)

        # Alterar manualmente as cores das barras
        for i, bar in enumerate(fig.data[0].x):
            fig.data[0].marker.color = colors
        # Exibi√ß√£o do gr√°fico interativo no Streamlit
        st.plotly_chart(fig)

        # Colunas para os bot√µes Rx (depois exibir os bot√µes abaixo do gr√°fico)
        cols = st.columns(14)

        # Simula√ß√£o de clique nos bot√µes
        for i in range(13):
            with cols[i+1]:
                if st.button(f"Rx{i}"):
                    st.session_state.selected_column = i  # Armazenar a coluna selecionada
                    try:
                        st.session_state.calib_fig = plot_matriz_calib_calib(st.session_state.matriz_cali, i, matriz_file_box)
                    except:
                        st.write("Erro na cria√ß√£o dos gr√°ficos.")
                    st.experimental_rerun()

        cols = st.columns(2)
        with cols[0]:
            # Exibi√ß√£o da figura de calibra√ß√£o (se houver)
            if 'calib_fig' in st.session_state:
                try:
                    st.plotly_chart(st.session_state.calib_fig)
                except:
                    st.write("Selecione uma coluna.")

# Conte√∫do da P√°gina 3
elif page == "üìà An√°lise dos gr√°ficos":

    cols = st.columns(3)
    # Filtrar os nomes que come√ßam com n√∫meros
    number_names = df[df['Tables_in_base_de_dados'].str.contains(r'^\d')]['Tables_in_base_de_dados']

    with cols[0]:
        # Exibir a caixa de sele√ß√£o com os valores filtrados
        gif_file_box = st.selectbox('Selecione a espessura da calibra√ß√£o', number_names.apply(lambda x: extrair_valor(x)).unique().tolist())
        filtered_gif = df[df['Tables_in_base_de_dados'].apply(lambda x: any(x.startswith(val) for val in gif_file_box))]['Tables_in_base_de_dados'].tolist()
    # filtered_gif = df[df['Tables_in_base_de_dados'].str.startswith(gif_file_box)]['Tables_in_base_de_dados'].tolist() # Obtendo todos os arquivos da espessura selecionada
    #filtrado = [name[1:-1] for name in filtered_gif]
    
    # Filtrar os nomes que come√ßam com "VH"
    vh_names = df[df['Tables_in_base_de_dados'].str.startswith('VH')]['Tables_in_base_de_dados']
    with cols[1]:
        # Exibir a caixa de sele√ß√£o com os valores filtrados
        VH_file_box = st.selectbox('Selecione o VH', vh_names)
    
    #st.write(filtrado)
    # Bot√£o para realizar a a√ß√£o
    # if st.button('Gerar gif'):
    #     if gif_file_box and VH_file_box:
    #         st.write("Gerando GIF...")
    #         imagens = calibration_analysis(filtered_gif,VH_file_box)
    #         # Realizar a tarefa de inclus√£o de gif
    #         st.write("Gif gerado")

    #         # Criar um GIF a partir das imagens
    #         gif_bytes = io.BytesIO()
    #         imageio.mimsave(gif_bytes, imagens, format='GIF', duration=5)
    #         gif_bytes.seek(0)
    #         # Exibir o GIF em Streamlit
    #         st.image(gif_bytes.read())

    #     else:
    #         st.write("Erro.")

    # # Inicializar o estado da sess√£o para o √≠ndice do gr√°fico
    # if 'graph_index' not in st.session_state:
    #     st.session_state.graph_index = 0

    # if st.button('Gerar gr√°ficos'):
    #     if 'filtered_gif' in locals() and 'VH_file_box' in locals():  # Verifica se as vari√°veis foram definidas
    #         figs = calibration_analysis(filtered_gif, VH_file_box)

    #         for fig in range(len(figs)):
    #             # Exibe o gr√°fico atual baseado no √≠ndice armazenado
    #             st.plotly_chart(figs[st.session_state.graph_index])

    #             # Incrementa o √≠ndice para o pr√≥ximo gr√°fico no pr√≥ximo clique
    #             st.session_state.graph_index += 1

    #             # Reinicia o √≠ndice se chegar ao final da lista
    #             if st.session_state.graph_index >= len(figs):
    #                 # st.session_state.graph_index = 0
    #                 break

    #             # # st.write(f"Gr√°fico {st.session_state.graph_index + 1} gerado!")
    #             # st.write(f"Gif gerado!")
    #     else:
    #         st.write("Erro: Arquivos n√£o selecionados.")


    if st.button('Gerar gr√°ficos'):
        if gif_file_box and VH_file_box:
            st.write("Gerando gr√°ficos...")

            # Gera os gr√°ficos Plotly
            try:
                figs = calibration_analysis(filtered_gif, VH_file_box)
            except:
                st.write("Erro na an√°lise, verifique se a espessura e o VH s√£o coerentes.")

            # Exibir os gr√°ficos diretamente no Streamlit
            for fig in figs:
                st.plotly_chart(fig)  # Exibe o gr√°fico Plotly diretamente

            # st.write("Gr√°ficos gerados com sucesso!")
        else:
            st.write("Erro: Arquivos n√£o selecionados.")

# Conte√∫do da P√°gina 4
elif page == "üîç Visualiza√ß√£o":
    # Filtrar os nomes que come√ßam com n√∫meros
    number_names = df[df['Tables_in_base_de_dados'].str.contains(r'^\d')]['Tables_in_base_de_dados']
    df['Espessuras'] = number_names.apply(lambda x: extrair_valor(x))
    df['Faixa'] = number_names.apply(lambda x: extrair_valor_pos_sublinhado(x))

    cols = st.columns(3)
    # st.write(number_names)
    with cols[0]:
        # Exibir a caixa de sele√ß√£o com os valores filtrados
        fEspessura = st.selectbox('Selecione a espessura da calibra√ß√£o', number_names.apply(lambda x: extrair_valor(x)).unique().tolist())
    
    with cols[1]:
        fFaixa = st.selectbox(
            "Selecione a Faixa utilizada:",
            options=df['Faixa'].unique()
        )

    tab1_value_calibration = df.loc[(
        df['Espessuras'] == fEspessura) &
        (df['Faixa'] == fFaixa)
    ]

    try:
        table_name = tab1_value_calibration['Tables_in_base_de_dados'].iloc[0]
        # Consulta SQL
        sql = f'SELECT * FROM {table_name}'

        # Ler dados do banco de dados e armazenar em um DataFrame
        df_calibration = pd.read_sql(sql, con=engine)

        # Remover as colunas 'id' e 'segundos' do DataFrame
        df_calibration_filtered = df_calibration.drop(columns=['id', 'Seconds'])

        # Gerar heatmap utilizando Plotly
        fig = px.imshow(df_calibration_filtered.values, 
                        labels=dict(color="Intensidade"),
                        x=list(df_calibration_filtered.columns), 
                        y=df_calibration_filtered.index,
                        title=f'Visualiza√ß√£o (sem filtro/sem tratamento): {table_name}')

        # Exibir o gr√°fico no Streamlit
        st.plotly_chart(fig)

        # Exibir t√≠tulo da aplica√ß√£o
        st.title('Tabela calibra√ß√£o')

        # Exibir o DataFrame
        st.write(f'Valores obtidos para a calibra√ß√£o {table_name}:')
        st.dataframe(df_calibration)
    except:
        st.write("Espessura/Faixa n√£o reconhecida.")

# Conte√∫do da P√°gina 5
elif page == "üìä P√≥s Calibra√ß√£o":
    number_names = df[df['Tables_in_base_de_dados'].str.contains(r'^\d')]['Tables_in_base_de_dados']
    vh_names = df[df['Tables_in_base_de_dados'].str.startswith('VH')]['Tables_in_base_de_dados']
    vl_names = df[df['Tables_in_base_de_dados'].str.startswith('VL')]['Tables_in_base_de_dados']
    matriz_names = df[df['Tables_in_base_de_dados'].str.startswith('Matriz')]['Tables_in_base_de_dados']
    # Criando colunas
    col1, col2, col3 = st.columns(3)

    # Exibindo a imagem na primeira coluna
    with col1:
        pos_file_box = st.selectbox('Selecione a espessura da calibra√ß√£o', number_names.apply(lambda x: extrair_valor(x)).unique().tolist())
        VH_file_box = st.selectbox('Selecione o VH', vh_names)

    # Exibindo a imagem na primeira coluna
    with col2:
        matriz_file_box = st.selectbox('Selecione a matriz de calibra√ß√£o', matriz_names.apply(lambda x: extrair_valor_matriz(x)).unique().tolist())
        VL_file_box = st.selectbox('Selecione o VL', vl_names)

    filtered_pos = df[df['Tables_in_base_de_dados'].str.startswith(pos_file_box)]['Tables_in_base_de_dados'].tolist() # Obtendo todos os arquivos da espessura selecionada
    filtered_matriz = df[df['Tables_in_base_de_dados'].str.startswith(matriz_file_box)]['Tables_in_base_de_dados'].tolist() # Obtendo todos os arquivos da espessura selecionada

    
    # Inicializando session state
    if 'fr_all' not in st.session_state:
        st.session_state.fr_all = None
    if 'VL_compar' not in st.session_state:
        st.session_state.VL_compar = None

    # Bot√£o para realizar a a√ß√£o
    if st.button('Gerar an√°lise'):
        if pos_file_box and VH_file_box and matriz_file_box and filtered_matriz and VL_file_box:
            st.write("Gerando an√°lise...")
            try:
                st.session_state.fr_all,st.session_state.VL_compar = pos_calibration_analysis(filtered_pos,matriz_file_box,filtered_matriz,VH_file_box,VL_file_box)
            except:
                st.write("Erro na an√°lise, verifique se as vari√°veis inclusas acima est√£o corretas.")
            # Realizar a tarefa de inclus√£o de variaveis
            st.write("An√°lise gerada")
        else:
            st.write("Selecione todas as caixas de sele√ß√£o.")
    
    # if st.button('Salvar gr√°fico no banco de dados.'):
    #     pos_calibration_save(fr_all)

    col1, col2 = st.columns(2)

    # with col1:
    #     if st.session_state.fr_all:
    #         fr_min,fr_max = min_max(st.session_state.fr_all)

    #         # Interface para selecionar qual gr√°fico visualizar
    #         selected_graph = st.selectbox("Escolha o gr√°fico", list(st.session_state.fr_all.keys()))
            
    #         # Exibe o gr√°fico correspondente
    #         plot_color_map(st.session_state.fr_all[selected_graph]['fr1'][0].apply(pd.to_numeric, errors='coerce'), selected_graph, fr_min, fr_max)

    if st.session_state.fr_all:
        fr_min, fr_max = min_max(st.session_state.fr_all)
    fr_max = 800

    col1, col2, col3 = st.columns(3)

    if st.button("Gerar gr√°ficos"):
        if st.session_state.fr_all:
            col_map = {0: col1, 1: col2, 2: col3}  # Mapeia os √≠ndices √†s colunas

            for idx, value in enumerate(st.session_state.fr_all):
                col = col_map[idx % 3]  # Seleciona a coluna com base no √≠ndice
                with col:
                    # Exibe o gr√°fico correspondente
                    try:
                        plot_color_map_plotly(st.session_state.fr_all[value]['fr1'][0].apply(pd.to_numeric, errors='coerce'), value, fr_min, fr_max)
                    except:
                        st.write("Erro na plotagem, verifique se a an√°lise √© coerente.")
        else:
            st.write("Gere a an√°lise primeiro")
        #     for idx, value in enumerate(st.session_state.fr_all):
        #         if idx%4==0:
        #             with col1:
        #                 # Exibe o gr√°fico correspondente
        #                 plot_color_map(st.session_state.fr_all[value]['fr1'][0].apply(pd.to_numeric, errors='coerce'),value, fr_min, fr_max)
        #         elif idx%4==1:
        #             with col2:
        #                 # Exibe o gr√°fico correspondente
        #                 plot_color_map(st.session_state.fr_all[value]['fr1'][0].apply(pd.to_numeric, errors='coerce'),value, fr_min, fr_max)
        #         elif idx%4==2:
        #             with col3:
        #                 # Exibe o gr√°fico correspondente
        #                 plot_color_map(st.session_state.fr_all[value]['fr1'][0].apply(pd.to_numeric, errors='coerce'),value, fr_min, fr_max)
        #         else:
        #             with col4:
        #                 # Exibe o gr√°fico correspondente
        #                 plot_color_map(st.session_state.fr_all[value]['fr1'][0].apply(pd.to_numeric, errors='coerce'),value, fr_min, fr_max)
        # else:
        #     st.write("Gere a an√°lise primeiro")
